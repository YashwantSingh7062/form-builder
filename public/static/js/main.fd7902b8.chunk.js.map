{"version":3,"sources":["App/App.module.css","App/components/Loader/loader.module.css","App/shared/graphql/index.js","App/components/Navbar/index.js","App/components/Loader/index.js","App/shared/components/FormikControl/input.js","App/shared/components/FormikControl/textarea.js","App/shared/components/FormikControl/select.js","App/shared/components/FormikControl/radio.js","App/shared/components/FormikControl/checkbox.js","App/shared/components/FormikControl/file.js","App/shared/components/FormikControl/index.js","App/shared/validations/index.js","App/shared/query/sharedFragment.js","App/shared/query/index.js","App/components/AddQuestionModal/index.js","App/components/AddFormModal/index.js","App/shared/configs/index.js","App/components/FormList/index.js","App/components/FormList/ViewForm/index.js","assets/plus.png","App/index.js","reportWebVitals.js","index.js","App/components/AddQuestionModal/addQuestion.module.css"],"names":["module","exports","ErrorLink","onError","graphQLErrors","networkError","map","message","locations","path","extensions","code","toast","type","console","log","link","HttpLink","uri","client","ApolloClient","from","cache","InMemoryCache","typePolicies","Form","fields","createdAt","read","moment","format","MyNav","Navbar","bg","expand","Container","Brand","href","Toggle","Collapse","id","Nav","className","Link","to","Loading","styles","loaderDiv","Spinner","animation","role","Input","props","label","parentClass","name","required","rest","Math","floor","random","htmlFor","Textarea","component","style","height","Select","options","dropdownIcon","typeYearDropDown","React","useState","max","Date","getFullYear","min","years","yearsArr","i","unshift","Fragment","value","defaultValue","disabled","placeholder","year","option","key","Radio","onClick","field","index","checked","Checkbox","data","onChange","evt","includes","File","accept","multiple","form","event","setFieldValue","Object","values","currentTarget","files","setFieldTouched","FormikControl","control","AddFormSchema","Yup","shape","trim","strict","AddQuestionSchema","questions","of","question","question_type","answer","NEW_FORM_FRAGMENT","gql","FORMS","FORM","ADD_FORM","ADD_QUESTION","SUBMIT_FORM","AddQuestionModal","formId","modalProps","useMutation","onCompleted","onHide","addQuestions","loading","Modal","size","centered","Header","closeButton","Title","Body","initialValues","onSubmit","variables","validationSchema","formik","touched","errors","render","arrayHelpers","float_right","push","icon","faPlus","float_clearfix","float_left","answerButtons","remove","faTrashAlt","answerHelper","length","answerIndex","insert","anchor_tag","AddFormModal","setFormId","modalShow","setModalShow","addForm","_id","update","modify","forms","existingForm","newFormRef","writeFragment","fragment","show","string","slice","FormList","useQuery","offset","limit","error","Card","Table","striped","bordered","hover","title","configs","slug","total_response","useParams","sumbitForm","sumbitLoading","App","ApolloProvider","add_form_div","src","Add_Icon","alt","add_form_button_img","exact","ViewForm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd7902b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_form_div\":\"App_add_form_div__1a_27\",\"add_form_button_img\":\"App_add_form_button_img__3sUPp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loaderDiv\":\"loader_loaderDiv__2yVdH\"};","import { ApolloClient, InMemoryCache, from, HttpLink } from \"@apollo/client\";\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport { toast } from \"react-toastify\";\r\nimport moment from 'moment';\r\n\r\nconst SITE_URL = \"/\"\r\n\r\nconst ErrorLink = onError(({ graphQLErrors, networkError }) => {\r\n    if (graphQLErrors) {\r\n        graphQLErrors.map(({ message, locations, path, extensions }) => {\r\n            if (extensions.code === \"AUTHENTICATION_ERROR\") {\r\n                // Remove your token form localStorage.\r\n            }\r\n            toast(message, { type: \"error\" });\r\n            console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`);\r\n        });\r\n    }\r\n\r\n    if (networkError) {\r\n        toast(networkError, { type: \"error\" });\r\n        console.log(`[Network error]: ${networkError}`);\r\n    }\r\n});\r\n\r\nconst link = new HttpLink({\r\n    uri: `${SITE_URL}graphql`,\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: from([ErrorLink, link]),\r\n    cache: new InMemoryCache({\r\n        typePolicies: {\r\n            Form: {\r\n                fields: {\r\n                    createdAt: {\r\n                        read(createdAt) {\r\n                            return moment(createdAt).format('DD MMMM YYYY');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        },\r\n    }),\r\n});\r\n\r\nexport default client;\r\n","import React from 'react';\r\nimport { Navbar, Container, Nav, NavDropdown } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst MyNav = () => {\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Container>\r\n                <Navbar.Brand href=\"#home\">Form Builder</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                 <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link><Link to={`/`}>Home</Link></Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default MyNav;\r\n","import { Spinner} from 'react-bootstrap';\r\nimport styles from './loader.module.css';\r\nconst Loading = () => {\r\n    return <div className={styles.loaderDiv}>\r\n        <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n    </div>\r\n}\r\n\r\nexport default Loading;","import React from 'react';\nimport { Field, ErrorMessage } from 'formik';\n\nconst Input = (props) => {\n    const { label, parentClass, name, required, ...rest } = props;\n    const id = Math.floor(Math.random() * Math.floor(1000));\n    return (\n        <div className={parentClass}>\n            {label && <label htmlFor={`${id}-${name}`}>{label} {required && <span className=\"text-danger\">*</span>} </label>}\n            <Field id={`${id}-${name}`} name={name} {...rest} />\n            <small className=\"text-danger\"><ErrorMessage name={name} /></small>\n        </div>\n    )\n}\n\nexport default Input;","import React from 'react';\nimport { Field, ErrorMessage } from 'formik';\nconst Textarea = (props) => {\n    const { label, name, parentClass, required, ...rest } = props;\n    const id = Math.floor(Math.random() * Math.floor(1000));\n    return (\n        <div className={parentClass}>\n            {label && <label htmlFor={`${id}-${name}`}>{label} {required && <span className=\"text-danger\">*</span>}</label>}\n            <Field component=\"textarea\" id={`${id}-${name}`} name={name} style={{ height: '100px' }} {...rest} />\n            <small className=\"text-danger\"><ErrorMessage name={name} /></small>\n        </div>\n    )\n}\nexport default Textarea;","\nimport React from 'react';\nimport { Field, ErrorMessage } from 'formik';\n\nconst Select = (props) => {\n    const { label, name, parentClass, dropdownIcon, options, required, typeYearDropDown, ...rest } = props;\n    const id = Math.floor(Math.random() * Math.floor(1000));\n\n    // For Year Select DropDown Field \n    const [years, setYears] = React.useState({\n        max: new Date().getFullYear(),\n        min: new Date().getFullYear() - 10\n    });\n    let yearsArr = [];\n    for (var i = years.min; i <= years.max; i++) {\n        yearsArr.unshift(i);\n    }\n    // ----------------------------------\n    return (\n        <div className={parentClass}>\n            {label && <label htmlFor={`${id}-${name}`}>{label} {required && <span className=\"text-danger\">*</span>}</label>}\n            <Field component=\"select\" id={`${id}-${name}`} name={name} {...rest}>\n                {typeYearDropDown ?\n                    <React.Fragment>\n                        <option value=\"\" defaultValue disabled>{props.placeholder}</option>\n                        {yearsArr.map(year => <option key={year} value={year}>{year}</option>)}\n                    </React.Fragment> :\n                    options.map(option => {\n                        return (\n                            <option key={option.value} value={option.value}>{option.key}</option>\n                        )\n                    })\n                }\n            </Field>\n            <small className=\"text-danger\"><ErrorMessage name={name} /></small>\n        </div>\n    )\n}\nexport default Select;","\nimport React from 'react';\nimport { Field, ErrorMessage } from 'formik';\n\nconst Radio = (props) => {\n    const { label, required, options, onClick, parentClass, name, ...rest } = props;\n    const id = Math.floor(Math.random() * Math.floor(1000));\n    return (\n        <div className={parentClass}>\n            {label && <label>{label} {required && <span className=\"text-danger\">*</span>}</label>}\n            <fieldset className=\"service-select-content\">\n                <Field name={name} {...rest}>\n                    {\n                        ({ field }) => {\n                            return (\n                                options.map((option, index) => {\n                                    return (\n                                        <React.Fragment key={option.value + index}>\n                                            <input type=\"radio\" name={name} id={`${id}-${name}-${index}`} {...field} value={option.value} checked={option.value === field.value} onClick={() => onClick && onClick()} />\n                                            <label htmlFor={`${id}-${name}-${index}`}>{option.key}</label>\n                                        </React.Fragment>\n                                    )\n                                })\n                            )\n                        }\n                    }\n                </Field>\n            </fieldset>\n            <small className=\"text-danger\"><ErrorMessage name={name} /></small>\n        </div>\n    )\n}\n\n\nexport default Radio;\n","\nimport React from 'react';\nimport { Field, ErrorMessage } from 'formik';\n\n\nconst Checkbox = (props) => {\n    const { label, required, options, parentClass, name, ...rest } = props;\n    const id = Math.floor(Math.random() * Math.floor(1000));\n    return (\n        <>\n            <div className={parentClass}>\n                {label && <label>{label} {required && <span className=\"text-danger\">*</span>}</label>}\n                <br />\n                <Field name={name} {...rest} >\n                    {\n                        (data) => {\n                            const { field } = data;\n                            return (\n                                options.map((option, index) => {\n                                     return <>\n                                     <input type=\"checkbox\" name={name} {...field} value={option.value} onChange={evt => {\n                                        // let fieldValue = [...field.value];\n                                        // if (field.value.includes(option.value)) {\n                                        //     var index = fieldValue.indexOf(evt.target.value);\n                                        //     if (index > -1) {\n                                        //         fieldValue.splice(index, 1);\n                                        //     }\n                                        // } else {\n                                        //     fieldValue.push(evt.target.value);\n                                        // }\n                                        // data.form.setFieldValue(\n                                        //     name,\n                                        //     Array.from(new Set(fieldValue))\n                                        // )\n                                    }\n                                    } checked={field.value?.includes(option.value)} />\n                                    {option.key}\n                                    </>\n                                })\n                            )\n                        }\n                    }\n                </Field>\n            </div>\n            <small className=\"text-danger\"><ErrorMessage name={name} /></small>\n        </>\n    )\n}\n\nexport default Checkbox;\n","import React from 'react';\nimport { Field, ErrorMessage } from 'formik';\n\nconst File = (props) => {\n    const { label, parentClass, className, accept, name, multiple, required } = props;\n    const id = Math.floor(Math.random() * Math.floor(1000));\n    return (\n        <div className={parentClass}>\n            {label && <label htmlFor={`${id}-${name}`}>{label} {required && <span className=\"text-danger\">*</span>} </label>}\n            <Field name={name}>\n                {(data) => {\n                    let { form } = data;\n                    return <input type=\"file\" name={name} className={className} accept={accept} onChange={event => {\n                        if (multiple) {\n                            form.setFieldValue(name, Object.values(event.currentTarget.files));\n                        } else {\n                            form.setFieldValue(name, event.currentTarget.files[0]);\n                        }\n                        form.setFieldTouched(name);\n                    }} multiple={multiple} />\n\n                }}\n            </Field>\n            <small className=\"text-danger\">\n                <ErrorMessage name={name} />\n            </small>\n        </div>\n    )\n}\n\nexport default File;","import React from \"react\";\nimport Input from \"./input\";\nimport Textarea from \"./textarea\";\nimport Select from \"./select\";\nimport Radio from \"./radio\";\nimport Checkbox from \"./checkbox\";\nimport File from './file';\n\nconst FormikControl = (props) => {\n  const { control, ...rest } = props;\n  switch (control) {\n    case \"input\":\n      return <Input {...rest} />;\n\n    case \"textarea\":\n      return <Textarea {...rest} />;\n\n    case \"select\":\n      return <Select {...rest} />;\n\n    case \"radio\":\n      return <Radio {...rest} />;\n\n    case \"checkbox\":\n      return <Checkbox {...rest} />;\n\n    case \"file\": return <File {...rest} />;\n  }\n};\n\nexport default FormikControl;\n","import * as Yup from \"yup\";\r\n\r\nexport const AddFormSchema = Yup.object().shape({\r\n    name: Yup\r\n        .string()\r\n        .trim(\"Name cannot include leading and trailing spaces\")\r\n        .strict(true)\r\n        .min(3, ({ min }) => `Name must be at least ${min} characters`)\r\n        .max(150, ({ max }) => `Name must be less than ${max} characters`)\r\n        .required(\"Name is required\"),\r\n});\r\n\r\nexport const AddQuestionSchema = Yup.object().shape({\r\n    questions: Yup.array()\r\n        .of(\r\n            Yup.object().shape({\r\n                question: Yup.string().min(4, 'too short!!').required('Question is Required'),\r\n                question_type: Yup.string().required('Please select question type.'),\r\n                answer: Yup.array()\r\n                        .of(\r\n                            Yup.string().required('Value should not be empty!.')\r\n                        )\r\n                        .required('Must have options')\r\n                        .min(1, 'Minimum of 1 Options'),\r\n            })\r\n        )\r\n        .required('Must have Question.') \r\n        .min(1, 'Minimum of 1 Question'),\r\n});","import { gql } from \"@apollo/client\";\r\n\r\nexport const NEW_FORM_FRAGMENT = gql`\r\n  fragment NewForm on Form {\r\n    _id\r\n    name\r\n    total_response\r\n    slug\r\n    createdAt\r\n  }\r\n`;","import { gql } from \"@apollo/client\";\r\nimport { NEW_FORM_FRAGMENT } from './sharedFragment';\r\n\r\nexport const FORMS = gql`\r\n  ${NEW_FORM_FRAGMENT}\r\n  query forms( $limit: Int!, $offset: Int!) {\r\n    forms(limit: $limit, offset: $offset){\r\n      forms{\r\n       ...NewForm\r\n      }\r\n      pageInfo{\r\n        offset\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FORM = gql`\r\n  ${NEW_FORM_FRAGMENT}\r\n  query form( $slug: String!) {\r\n    form(slug: $slug){\r\n      ...NewForm\r\n       questions {\r\n        _id\r\n        question\r\n        question_type\r\n        answer\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_FORM = gql`\r\n  ${NEW_FORM_FRAGMENT}\r\n  mutation AddFormMutation($form: FormInput!) {\r\n    addForm(form: $form){\r\n      message\r\n      form{\r\n        ...NewForm\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_QUESTION = gql`\r\n  ${NEW_FORM_FRAGMENT}\r\n  mutation AddQuestionsMutation($question: QuestionInput!) {\r\n    addQuestions(question: $question){\r\n      message\r\n      form{\r\n        ...NewForm\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SUBMIT_FORM = gql`\r\n  ${NEW_FORM_FRAGMENT}\r\n  mutation sumbitForm($slug: String!) {\r\n    sumbitForm(slug: $slug){\r\n      message\r\n      form{\r\n        ...NewForm\r\n      }\r\n    }\r\n  }\r\n`;","import { Formik, Form, FieldArray, Field } from \"formik\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Modal, Container } from 'react-bootstrap';\r\nimport { toast } from \"react-toastify\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// Components\r\nimport Loading from '../Loader';\r\n// Shared Components\r\nimport FormikControl from '../../shared/components/FormikControl';\r\n// Validation\r\nimport { AddQuestionSchema } from '../../shared/validations';\r\n// Query\r\nimport { ADD_QUESTION } from '../../shared/query';\r\n// Css\r\nimport styles from './addQuestion.module.css';\r\n\r\nfunction AddQuestionModal({ formId, ...modalProps }) {\r\n    const [addQuestions, { loading }] = useMutation(ADD_QUESTION, {\r\n        onCompleted: (data) => {\r\n            modalProps.onHide();\r\n            toast(data.addQuestions.message);\r\n        }\r\n    });\r\n    const addQuestionsArr = (values) => {\r\n        addQuestions({ variables: { question: { form: formId, ...values } } })\r\n    }\r\n\r\n    if (loading) return <Loading />\r\n    return (\r\n        <Modal\r\n            {...modalProps}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Add Questions\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Container className=\"pb-3\">\r\n                    <Formik\r\n                        initialValues={{ questions: [{ question_type: \"\", question: \"\", answer: [\"\"] }] }}\r\n                        onSubmit={addQuestionsArr}\r\n                        validationSchema={AddQuestionSchema}\r\n                    >\r\n                        {(formik) => {\r\n                            let { values, touched, errors } = formik;\r\n\r\n                            return (<Form>\r\n                                <FieldArray\r\n                                    name=\"questions\"\r\n                                    render={arrayHelpers => (\r\n                                        <>\r\n                                            <button\r\n                                                type=\"button\"\r\n                                                className={`btn btn-info mb-2 ${styles.float_right}`}\r\n                                                onClick={() => arrayHelpers.push({ question: '', question_type: '', answer: [\"\"] })}\r\n                                            >\r\n                                                <FontAwesomeIcon icon={faPlus} /> New Question\r\n                                        </button>\r\n                                        <div className={styles.float_clearfix}></div>\r\n                                            <div>\r\n                                                {values.questions.map((question, index) => (\r\n                                                    <div key={index} className=\"border p-3 my-3\">\r\n                                                        <h5 className={`${styles.float_left} mb-3`}>Question {index + 1}</h5>\r\n                                                        {index != 0 && \r\n                                                            <a className={`${styles.answerButtons} ${styles.float_right} mb-2`} onClick={() => arrayHelpers.remove(index)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </a>\r\n                                                        }\r\n                                                        \r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            parentClass=\"form-group my-2\"\r\n                                                            name={`questions[${index}].question`}\r\n                                                            className={`form-control `}\r\n                                                            placeholder=\"Question\"\r\n                                                            required\r\n                                                        />\r\n                                                        <FormikControl\r\n                                                            control=\"select\"\r\n                                                            options={[\r\n                                                                { value: \"\", key: \"Select Question Type\" },\r\n                                                                { value: \"drop_down\", key: \"Drop Down\" },\r\n                                                                { value: \"text\", key: \"Text\" },\r\n                                                                { value: \"multi_choice\", key: \"Multichoice Checkbox\" },\r\n                                                                { value: \"radio\", key: \"Single Select Radio\" }\r\n                                                            ]}\r\n                                                            parentClass=\"form-group my-2\"\r\n                                                            name={`questions[${index}].question_type`}\r\n                                                            className={`form-control`}\r\n                                                            placeholder=\"Question Type\"\r\n                                                            required\r\n                                                        />\r\n                                                        {\r\n                                                        question.question_type &&\r\n                                                             <FieldArray\r\n                                                            name={`questions[${index}].answer`}\r\n                                                            render={answerHelper => {\r\n                                                                if(question.question_type == \"text\" && values.questions[index].answer.length > 1) {\r\n                                                                    for(let i = 1; i <= values.questions[index].answer.length - 1; i++ ){\r\n                                                                       answerHelper.remove(i); \r\n                                                                    }\r\n                                                                }\r\n                                                                return(<div>\r\n                                                                    {values.questions[index].answer && values.questions[index].answer.length > 0 ? (\r\n                                                                        values.questions[index].answer.map((option, answerIndex) => (\r\n                                                                            <div key={answerIndex}>\r\n                                                                                {\r\n                                                                                question.question_type == 'text' ?\r\n                                                                                    <FormikControl\r\n                                                                                        control=\"input\"\r\n                                                                                        parentClass=\"form-group my-2 \"\r\n                                                                                        name={`questions.[${index}].answer.${answerIndex}`}\r\n                                                                                        className={`form-control`}\r\n                                                                                        placeholder=\"Write Here....\"\r\n                                                                                        required\r\n                                                                                    />\r\n                                                                                :\r\n                                                                                <div className=\"row\">\r\n                                                                                    <div className=\"col-10\">\r\n                                                                                        <FormikControl\r\n                                                                                            control=\"input\"\r\n                                                                                            parentClass=\"form-group my-2\"\r\n                                                                                            name={`questions.[${index}].answer.${answerIndex}`}\r\n                                                                                            className={`form-control`}\r\n                                                                                            placeholder=\"Option\"\r\n                                                                                            required\r\n                                                                                        />\r\n                                                                                    </div>\r\n                                                                                    <div className=\"col-1 pt-2\">\r\n                                                                                        <a className={styles.answerButtons}\r\n                                                                                            onClick={() => answerHelper.remove(answerIndex)}\r\n                                                                                        >\r\n                                                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                                        </a>\r\n                                                                                    </div>\r\n                                                                                    <div className=\"col-1 pt-2\">\r\n                                                                                        <a className={styles.answerButtons}\r\n                                                                                            onClick={() => answerHelper.insert(answerIndex + 1, '')}><FontAwesomeIcon icon={faPlus} /></a>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        ))\r\n                                                                    ) : (\r\n                                                                            <a className={`${styles.anchor_tag} my-2 mr-2`} onClick={() => answerHelper.push('')}>\r\n                                                                                Add options\r\n                                                                            </a>\r\n                                                                        )}\r\n                                                                </div>)\r\n                                                            }}\r\n                                                        />\r\n                                                            }\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                />\r\n                                <div className=\"form-group mt-3\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary w-100\" >Submit</button>\r\n                                </div>\r\n                            </Form>\r\n                            )\r\n                        }}\r\n                    </Formik>\r\n                </Container>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default AddQuestionModal;\r\n","import { useState } from 'react';\r\nimport { Formik, Form } from \"formik\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Modal, Button, Container } from 'react-bootstrap';\r\nimport { toast } from \"react-toastify\";\r\n\r\n// Components\r\nimport Loading from '../Loader';\r\nimport AddQuestionModal from '../AddQuestionModal';\r\n// Shared Components\r\nimport FormikControl from '../../shared/components/FormikControl';\r\n// Validation\r\nimport { AddFormSchema } from '../../shared/validations';\r\n// Query\r\nimport { NEW_FORM_FRAGMENT } from '../../shared/query/sharedFragment';\r\nimport { ADD_FORM } from '../../shared/query';\r\n\r\nfunction AddFormModal(props) {\r\n    const [formId, setFormId] = useState(0);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [addForm, { loading }] = useMutation(ADD_FORM, {\r\n        onCompleted: (data) => {\r\n            setFormId(data.addForm.form._id)\r\n            // toast(data.addForm.message);\r\n            props.onHide();\r\n            setModalShow(true);\r\n        },\r\n        update(cache, { data: { addForm } }) {\r\n            cache.modify({\r\n                fields: {\r\n                    forms(existingForm = {}, options) {\r\n                        const newFormRef = cache.writeFragment({\r\n                            data: addForm.form,\r\n                            fragment: NEW_FORM_FRAGMENT,\r\n                        });\r\n                        return {\r\n                            ...existingForm,\r\n                            forms: [newFormRef, ...existingForm.forms]\r\n                        };\r\n                    },\r\n                },\r\n            });\r\n        },\r\n    });\r\n\r\n    if (loading) return <Loading />\r\n    return (\r\n        <>\r\n            <Modal\r\n                {...props}\r\n                size=\"lg\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        Create New Form\r\n                </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Container className=\"py-3\">\r\n                        <Formik\r\n                            initialValues={{ name: \"\" }}\r\n                            onSubmit={(values) => addForm({ variables: { form: values } })}\r\n                            validationSchema={AddFormSchema}\r\n                        >\r\n                            {(formik) => (\r\n                                <Form>\r\n                                    <FormikControl\r\n                                        control=\"input\"\r\n                                        parentClass=\"form-group\"\r\n                                        name=\"name\"\r\n                                        className={`form-control ${formik.touched.name && formik.errors.name && \"is-invalid\"}`}\r\n                                        placeholder=\"Name\"\r\n                                        required\r\n                                    />\r\n                                    <div className=\"form-group mt-3\">\r\n                                        <button type=\"submit\" className=\"btn btn-primary w-100\" >Add Questions</button>\r\n                                    </div>\r\n                                </Form>\r\n                            )}\r\n                        </Formik>\r\n                    </Container>\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            <AddQuestionModal\r\n                formId={formId}\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddFormModal;\r\n","export default {\r\n    truncateString: (string, size = 25) => string.length > size ? string.slice(0, size - 1) + \"…\" : string,\r\n}","import { Card, Table, Container } from 'react-bootstrap';\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport {Link} from 'react-router-dom';\r\n\r\n// Components\r\nimport Loading from '../Loader';\r\n// Queries\r\nimport { FORMS } from '../../shared/query';\r\n// Configs\r\nimport configs from '../../shared/configs';\r\n\r\nconst FormList = () => {\r\n    const { data, error, loading } = useQuery(FORMS, { variables: { offset: 0, limit: 10 } });\r\n\r\n    if (loading) return <Loading />\r\n    return (<Container>\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title>Form Lists</Card.Title>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>Url</th>\r\n                            <th>Generated At</th>\r\n                            <th>Total Responses</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            data?.forms.forms.map(form => (\r\n                                <tr key={form._id}>\r\n                                    <td>1</td>\r\n                                    <td title={form.name}>{configs.truncateString(form.name)}</td>\r\n                                    <td> <Link to={`/${form.slug}`}>{form.slug}</Link></td>\r\n                                    <td>{form.createdAt}</td>\r\n                                    <td>{form.total_response}</td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </Card.Body>\r\n        </Card>\r\n    </Container>)\r\n}\r\n\r\nexport default FormList;","import { Card, Table, Container } from 'react-bootstrap';\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useParams } from 'react-router-dom'\r\nimport {toast } from 'react-toastify';\r\n\r\n// Components\r\nimport Loading from '../../Loader';\r\n// Queries\r\nimport { FORM, SUBMIT_FORM } from '../../../shared/query';\r\n// Configs\r\nimport configs from '../../../shared/configs';\r\n// Shared Components\r\nimport FormikControl from '../../../shared/components/FormikControl';\r\n\r\nconst FormList = () => {\r\n     let { slug } = useParams();\r\n    const { data, error, loading } = useQuery(FORM, { variables: { slug } });\r\n     const [sumbitForm, { loading: sumbitLoading }] = useMutation(SUBMIT_FORM, {\r\n        onCompleted: (data) => toast(data.sumbitForm.message)\r\n    });\r\n\r\n    const submitFormValues = (values) => sumbitForm({variables: {slug}})\r\n\r\n    if (loading || sumbitLoading) return <Loading />\r\n    return (<Container>\r\n        <Card>\r\n            <Card.Body>\r\n                <Card.Title className=\"text-center my-3\">{data?.form.name}</Card.Title>\r\n                 <Formik\r\n                    initialValues={{ name: \"\" }}\r\n                    onSubmit={submitFormValues}\r\n                >\r\n                    {(formik) => (\r\n                        <Form>\r\n                            {\r\n                                data?.form.questions.map((question) => {\r\n                                    if(question.question_type == \"drop_down\"){\r\n                                        return (\r\n                                            <FormikControl\r\n                                                control=\"select\"\r\n                                                options={[{key: `Please select value`, value: \"\"}, ...question.answer.map((answer, index) => ({key:answer , value: index}))]}\r\n                                                parentClass=\"form-group my-4\"\r\n                                                name={question._id}\r\n                                                label={question.question}\r\n                                                className={`form-control`}\r\n                                                placeholder={question.question}\r\n                                                required\r\n                                                key={question._id}\r\n                                            />\r\n                                        )\r\n                                    }else if(question.question_type == \"radio\"){\r\n                                        return (\r\n                                             <FormikControl\r\n                                                control=\"radio\"\r\n                                                options={question.answer.map((answer, index) => ({key:answer , value: `${index}`}))}\r\n                                                parentClass=\"form-group my-4\"\r\n                                                name={question._id}\r\n                                                label={question.question}\r\n                                                className={`form-control`}\r\n                                                key={question._id}\r\n                                                required\r\n                                            />\r\n                                        )\r\n                                    }else if(question.question_type ==\"multi_choice\"){\r\n                                        return (\r\n                                             <FormikControl\r\n                                                control=\"checkbox\"\r\n                                                options={question.answer.map((answer, index) => ({key:answer , value: `${index}`}))}\r\n                                                parentClass=\"form-group my-4\"\r\n                                                name={question._id}\r\n                                                label={question.question}\r\n                                                className={`form-control`}\r\n                                                key={question._id}\r\n                                                required\r\n                                            />\r\n                                        )\r\n                                    }else{\r\n                                        return (\r\n                                            <FormikControl\r\n                                                control=\"input\"\r\n                                                parentClass=\"form-group my-2\"\r\n                                                name={question._id}\r\n                                                className={`form-control`}\r\n                                                placeholder={question?.question}\r\n                                                label={question?.question}\r\n                                                key={question._id}\r\n                                                required\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                })\r\n                            }\r\n\r\n                            \r\n                            <div className=\"form-group mt-3\">\r\n                                <button type=\"submit\" className=\"btn btn-primary w-100\" >Submit</button>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Card.Body>\r\n        </Card>\r\n    </Container>)\r\n}\r\n\r\nexport default FormList;","export default __webpack_public_path__ + \"static/media/plus.7b5b49fb.png\";","import { useState } from 'react';\nimport { ToastContainer } from \"react-toastify\";\nimport { BrowserRouter as Router,  Switch, Route, Link} from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from './shared/graphql';\n\nimport MyNav from './components/Navbar';\nimport AddFromModal from './components/AddFormModal';\nimport FormList from './components/FormList';\nimport ViewForm from './components/FormList/ViewForm'\n\nimport \"react-toastify/dist/ReactToastify.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from './App.module.css';\n\n//Image\nimport Add_Icon from '../assets/plus.png'\n\nfunction App() {\n  const [modalShow, setModalShow] = useState(false);\n\n  return (\n    <Router>\n    <ApolloProvider client={client}>\n      {/* Toast */}\n      <ToastContainer />\n      {/* Add Form Modal */}\n      <AddFromModal\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n      {/* Navbar */}\n      <MyNav />\n      <a onClick={() => setModalShow(true)}>\n        <div className={styles.add_form_div}>\n          <img src={Add_Icon} alt=\"Add\" className={styles.add_form_button_img} />\n          <p className=\"text-muted mt-2\">Add More Forms</p>\n        </div>\n      </a>\n       <Switch>\n          <Route path=\"/\" exact>\n            <FormList />\n          </Route>\n          <Route path=\"/:slug\" exact>\n            <ViewForm />\n          </Route>\n        </Switch>\n    </ApolloProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/index';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answerButtons\":\"addQuestion_answerButtons__2o6i1\",\"float_right\":\"addQuestion_float_right__5WJuo\",\"float_left\":\"addQuestion_float_left__13WSG\",\"float_clearfix\":\"addQuestion_float_clearfix__1OofK\",\"anchor_tag\":\"addQuestion_anchor_tag__2M1hw\"};"],"sourceRoot":""}